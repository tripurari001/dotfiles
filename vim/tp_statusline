" vim: set ft=vim:

" Update trailing space and mixed indent warnings for the current buffer.
fun! s:update_warnings() abort
  if exists('b:tp_no_warnings')
    unlet! b:tp_stl_warnings
    return
  endif
  if exists('b:tp_large_file')
    let b:tp_stl_warnings = '  Large file '
    return
  endif
  let l:trail  = search('\s$',       'cnw')
  let l:spaces = search('^\s\{-} ',  'cnw')
  let l:tabs   = search('^\s\{-}\t', 'cnw')
  if l:trail || (l:spaces && l:tabs)
    let b:tp_stl_warnings = ' '
          \ . (l:trail            ? 'Trailing space ('.l:trail.') '           : '')
          \ . (l:spaces && l:tabs ? 'Mixed indent ('.l:spaces.'/'.l:tabs.') ' : '')
  else
    unlet! b:tp_stl_warnings
  endif
endf

function! s:statuslineGitBranch() abort
  let b:gitbranch=""
  if &modifiable
    let l:gitrevparse=system('git -C '.expand('%:p:h').' rev-parse --abbrev-ref HEAD')
    if !v:shell_error
      let b:gitbranch=' '.substitute(l:gitrevparse, '\n', '', 'g').' '
    endif
  endif
endfunction

" See :h mode()
let s:mode_map = {
      \ 'c'  : 'COMMAND',
      \ 'i'  : 'INSERT',
      \ 'ic' : 'INSERT COMPL',
      \ 'ix' : 'INSERT COMPL',
      \ 'n'  : 'NORMAL',
      \ 'ni' : '(INSERT)',
      \ 'no' : 'OP PENDING',
      \ 'R'  : 'REPLACE',
      \ 'Rv' : 'V REPLACE',
      \ 's'  : 'SELECT',
      \ 'S'  : 'S-LINE',
      \ '' : 'S-BLOCK',
      \ 't'  : 'TERMINAL',
      \ 'v'  : 'VISUAL',
      \ 'V'  : 'V-LINE',
      \ '' : 'V-BLOCK',
      \}

function! StatuslineMode() abort
  return s:mode_map[mode()]
endfunction

let s:active_winnr = -1
function! s:onWindowChage() abort
  let s:active_winnr = winnr()
  call s:statuslineGitBranch()
  call s:update_warnings()
endfunction

" nr is always the number of the currently active window. In a %{} context, winnr()
" always refers to the window to which the status line being drawn belongs. Since this
" function is invoked in a %{} context, winnr() may be different from a:nr. We use this
" fact to detect whether we are drawing in the active window or in an inactive window.
fun! SetFlags() abort
  call extend(w:, {
        \ 'tp_active': winnr() == s:active_winnr,
        \ 'tp_winwd': winwidth(winnr()),
        \ })
  return ''
endf

fun! s:setStatusLine()
  set statusline=%{SetFlags()}
  set statusline+=%1*\ %{StatuslineMode()}\                                   "To remove warning of trailing space
  set statusline+=%2*%{get(w:,'tp_active')&&get(w:,'tp_winwd')>99?b:gitbranch:''}
  set statusline+=%#CursorLineNr#\ B:%n\ W:%{winnr()}\                        "To remove warning of trailing space
  set statusline+=%3*\ %<%f%m
  set statusline+=%3*%{&modifiable?(&readonly?'▪':''):'✗'}%h\                 "To remove warning of trailing space
  set statusline+=%=
  set statusline+=%3*\ %y\                                                    "To remove warning of trailing space
  set statusline+=%2*\ %{&ff}[%{strlen(&fenc)?&fenc:&enc}]\                   "To remove warning of trailing space
  set statusline+=%1*\ %l/%L:%c\ %P\                                          "To remove warning of trailing space
  set statusline+=%#WarningMsg#
  set statusline+=%{get(w:,'tp_active')&&get(w:,'tp_winwd')>99?get(b:,'tp_stl_warnings',''):''}
endf

" Functions to Enable and Disable StatusLine
fun! s:enableStatusLine() abort
  if exists("g:default_stl") | return | endif
  augroup statusLineCmd
    autocmd!
    autocmd BufReadPost,BufWritePost * call <sid>update_warnings()
    autocmd CmdwinEnter * call <sid>onWindowChage()
    autocmd VimEnter,WinEnter,BufWinEnter,FileType,BufUnload * call <sid>onWindowChage()
  augroup END
  set noshowmode " Do not show the current mode because it is displayed in the status line
  set noruler
  let g:default_stl = 1
  let g:default_tal = 1
  call s:setStatusLine()
endf

fun! s:disableStatusLine() abort
  if !exists("g:default_stl") | return | endif
  unlet g:default_tal
  unlet g:default_stl
  set ruler
  set showmode
  set statusline=
  autocmd! statusLineCmd
  augroup! statusLineCmd
endf


" Custom status line
command! -nargs=0 EnableStatusLine call <sid>enableStatusLine()
command! -nargs=0 DisableStatusLine call <sid>disableStatusLine()

" Enable Statusline
EnableStatusLine
